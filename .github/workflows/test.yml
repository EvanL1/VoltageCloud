name: IoT Platform Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCESS_KEY_ID: testing
  AWS_SECRET_ACCESS_KEY: testing
  AWS_SECURITY_TOKEN: testing
  AWS_SESSION_TOKEN: testing

jobs:
  # 代码质量检查
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r tests/requirements-test.txt

      - name: Code formatting check
        run: |
          black --check --line-length=120 iot_poc/ lambda/ tests/
          isort --check-only --profile black --line-length=120 iot_poc/ lambda/ tests/

      - name: Linting
        run: |
          flake8 iot_poc/ lambda/ tests/ --max-line-length=120 --extend-ignore=E203,W503
          pylint iot_poc/ lambda/ --rcfile=.pylintrc || true

      - name: Type checking
        run: |
          mypy iot_poc/ lambda/ --ignore-missing-imports || true

      - name: Security scan
        run: |
          mkdir -p tests/reports
          bandit -r iot_poc/ lambda/ -f json -o tests/reports/bandit.json || true
          safety check --json --output tests/reports/safety.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: tests/reports/*.json

  # Python测试矩阵
  python-tests:
    name: Python Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-py${{ matrix.python-version }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r tests/requirements-test.txt

      - name: Install Node.js for CDK
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install CDK
        run: npm install -g aws-cdk@latest

      - name: Run unit tests
        run: |
          mkdir -p tests/reports
          python tests/test_runner.py unit -v

      - name: Run integration tests
        run: |
          python tests/test_runner.py integration -v

      - name: Run infrastructure tests
        run: |
          python tests/test_runner.py infrastructure -v

      - name: Generate coverage report
        run: |
          pytest tests/ \
            --cov=iot_poc \
            --cov=lambda \
            --cov-report=xml:tests/reports/coverage.xml \
            --cov-report=html:tests/reports/coverage_html \
            --cov-report=term-missing \
            --cov-fail-under=80

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: tests/reports/coverage.xml
          fail_ci_if_error: false
          verbose: true

      - name: Upload test reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-reports-py${{ matrix.python-version }}
          path: tests/reports/

  # Rust测试
  rust-tests:
    name: Rust Lambda Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: rustfmt, clippy

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rust-lambda/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check Rust formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path rust-lambda/Cargo.toml -- --check

      - name: Run Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path rust-lambda/Cargo.toml -- -D warnings

      - name: Run Rust tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path rust-lambda/Cargo.toml --verbose

      - name: Generate test coverage (if tarpaulin available)
        uses: actions-rs/cargo@v1
        continue-on-error: true
        with:
          command: install
          args: cargo-tarpaulin

      - name: Run cargo-tarpaulin
        uses: actions-rs/cargo@v1
        continue-on-error: true
        with:
          command: tarpaulin
          args: --manifest-path rust-lambda/Cargo.toml --out Xml --output-dir tests/reports/

  # 端到端测试
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [code-quality, python-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r tests/requirements-test.txt

      - name: Install Node.js for CDK
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install CDK
        run: npm install -g aws-cdk@latest

      - name: Run E2E tests
        run: |
          mkdir -p tests/reports
          pytest tests/ -m e2e -v --tb=short \
            --junit-xml=tests/reports/e2e_tests.xml

      - name: Upload E2E test reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-reports
          path: tests/reports/

  # 性能测试
  performance-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[benchmark]')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r tests/requirements-test.txt

      - name: Run performance tests
        run: |
          mkdir -p tests/reports
          python tests/test_runner.py performance -v
          pytest tests/ -m slow --benchmark-only \
            --benchmark-json=tests/reports/benchmark.json

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: tests/reports/benchmark.json

  # Docker测试
  docker-tests:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          if [ -f Dockerfile ]; then
            docker build -t iot-platform:test .
          else
            echo "Dockerfile not found, skipping Docker tests"
          fi

      - name: Run tests in Docker
        run: |
          if [ -f Dockerfile.test ]; then
            docker build -f Dockerfile.test -t iot-platform-test:latest .
            docker run --rm iot-platform-test:latest
          else
            echo "Dockerfile.test not found, skipping Docker tests"
          fi

  # 最终汇总
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [code-quality, python-tests, rust-tests]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create test summary
        run: |
          echo "# 🧪 IoT Platform Test Results" > test_summary.md
          echo "" >> test_summary.md
          echo "## Test Status" >> test_summary.md
          
          if [[ "${{ needs.code-quality.result }}" == "success" ]]; then
            echo "✅ **Code Quality**: PASSED" >> test_summary.md
          else
            echo "❌ **Code Quality**: FAILED" >> test_summary.md
          fi
          
          if [[ "${{ needs.python-tests.result }}" == "success" ]]; then
            echo "✅ **Python Tests**: PASSED" >> test_summary.md
          else
            echo "❌ **Python Tests**: FAILED" >> test_summary.md
          fi
          
          if [[ "${{ needs.rust-tests.result }}" == "success" ]]; then
            echo "✅ **Rust Tests**: PASSED" >> test_summary.md
          else
            echo "❌ **Rust Tests**: FAILED" >> test_summary.md
          fi
          
          echo "" >> test_summary.md
          echo "## Coverage Reports" >> test_summary.md
          echo "- 📊 [Python Coverage Reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> test_summary.md
          echo "- 🦀 [Rust Test Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> test_summary.md
          
          echo "" >> test_summary.md
          echo "Generated on: $(date -u)" >> test_summary.md

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test_summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Upload test summary
        uses: actions/upload-artifact@v3
        with:
          name: test-summary
          path: test_summary.md

  # 自动部署到开发环境（仅主分支）
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.python-tests.result == 'success'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Node.js for CDK
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install CDK
        run: npm install -g aws-cdk@latest

      - name: Run final infrastructure tests
        run: |
          python tests/test_runner.py infrastructure -v

      - name: Deploy to development
        run: |
          cdk bootstrap
          cdk deploy --all --require-approval never --context environment=development

      - name: Run post-deployment tests
        run: |
          # 等待部署完成
          sleep 30
          # 运行部署后验证测试
          pytest tests/ -m "post_deployment" -v || true

      - name: Notify deployment status
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ Development deployment successful"
          else
            echo "❌ Development deployment failed"
          fi 