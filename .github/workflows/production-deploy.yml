name: Production IoT PoC Deployment

on:
  push:
    branches: [main]
    paths:
      - 'iot_poc/**'
      - 'lambda/**'
      - 'production/**'
      - 'requirements.txt'
      - 'cdk.json'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-west-2
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.12'

jobs:
  # Pre-deployment validation
  validate:
    runs-on: ubuntu-latest
    outputs:
      config-valid: ${{ steps.validate-config.outputs.valid }}
      environment: ${{ steps.set-env.outputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set environment
      id: set-env
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "environment=production" >> $GITHUB_OUTPUT
        else
          echo "environment=staging" >> $GITHUB_OUTPUT
        fi
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r production/requirements-prod.txt
    
    - name: Validate configuration
      id: validate-config
      env:
        ENVIRONMENT: ${{ steps.set-env.outputs.environment }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        ALERT_EMAIL: ${{ secrets.ALERT_EMAIL }}
      run: |
        python3 -c "
        from production.config import load_production_config
        config = load_production_config()
        errors = config.validate()
        if errors:
            print('Configuration validation failed:')
            for error in errors:
                print(f'  - {error}')
            exit(1)
        else:
            print('Configuration validation passed')
            print('valid=true')
        " >> $GITHUB_OUTPUT
    
    - name: Lint Python code
      run: |
        pip install flake8 black mypy
        black --check .
        flake8 . --max-line-length=100 --ignore=E203,W503
        mypy production/ --ignore-missing-imports

  # Security scanning
  security:
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.config-valid == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan.sarif'
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

  # Build and test
  build-test:
    runs-on: ubuntu-latest
    needs: [validate, security]
    if: needs.validate.outputs.config-valid == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'package*.json'
    
    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
        pip install -r production/requirements-prod.txt
        pip install pytest pytest-cov
    
    - name: Install CDK
      run: npm install -g aws-cdk@2
    
    - name: Build Rust Lambda (if exists)
      if: hashFiles('rust-lambda/Cargo.toml') != ''
      run: |
        if [ -f "rust-lambda/Cargo.toml" ]; then
          cd rust-lambda
          cargo build --release
          cd ..
        fi
    
    - name: Run unit tests
      run: |
        python -m pytest lambda/ production/ -v --cov=. --cov-report=xml
    
    - name: CDK Synth
      env:
        AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
        ENVIRONMENT: ${{ needs.validate.outputs.environment }}
      run: |
        cdk synth
    
    - name: Upload CDK assets
      uses: actions/upload-artifact@v3
      with:
        name: cdk-assets
        path: cdk.out/
        retention-days: 7

  # Deploy to staging first (if production)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [validate, build-test]
    if: needs.validate.outputs.environment == 'production'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r production/requirements-prod.txt
    
    - name: Deploy to staging
      env:
        ENVIRONMENT: staging
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        STACK_NAME: IotPocStack-Staging
      run: |
        python production/deployment_manager.py
    
    - name: Run staging tests
      env:
        ENVIRONMENT: staging
        STACK_NAME: IotPocStack-Staging
      run: |
        python production/test_runner.py

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [validate, build-test, deploy-staging]
    if: always() && (needs.validate.outputs.environment == 'production' && needs.deploy-staging.result == 'success') || (needs.validate.outputs.environment == 'staging')
    environment: ${{ needs.validate.outputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
        role-duration-seconds: 3600
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r production/requirements-prod.txt
        npm install -g aws-cdk@2
    
    - name: Download CDK assets
      uses: actions/download-artifact@v3
      with:
        name: cdk-assets
        path: cdk.out/
    
    - name: Deploy infrastructure
      env:
        ENVIRONMENT: ${{ needs.validate.outputs.environment }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        ALERT_EMAIL: ${{ secrets.ALERT_EMAIL }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        python production/deployment_manager.py
    
    - name: Wait for infrastructure
      run: sleep 300  # Wait 5 minutes for infrastructure to be ready
    
    - name: Run comprehensive tests
      env:
        ENVIRONMENT: ${{ needs.validate.outputs.environment }}
      run: |
        python production/test_runner.py
    
    - name: Generate deployment report
      if: always()
      env:
        ENVIRONMENT: ${{ needs.validate.outputs.environment }}
      run: |
        python3 -c "
        from production.config import load_production_config
        from production.deployment_manager import DeploymentManager
        
        config = load_production_config()
        manager = DeploymentManager(config)
        
        try:
            outputs = manager.get_stack_outputs()
            context = config.get_deployment_context()
            
            print('=== DEPLOYMENT REPORT ===')
            print(f'Environment: {config.environment}')
            print(f'Region: {config.aws.region}')
            print(f'Stack: {config.stack_name}')
            print('')
            print('=== OUTPUTS ===')
            for key, value in outputs.items():
                print(f'{key}: {value}')
            print('')
            print('=== COST ESTIMATE ===')
            costs = context['estimated_monthly_cost']
            for service, cost in costs.items():
                print(f'{service}: \${cost:.2f}')
        except Exception as e:
            print(f'Failed to generate report: {e}')
        "
    
    - name: Notify on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        text: |
          ✅ IoT PoC deployment to ${{ needs.validate.outputs.environment }} successful!
          
          Environment: ${{ needs.validate.outputs.environment }}
          Commit: ${{ github.sha }}
          Actor: ${{ github.actor }}
    
    - name: Notify on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        text: |
          ❌ IoT PoC deployment to ${{ needs.validate.outputs.environment }} failed!
          
          Environment: ${{ needs.validate.outputs.environment }}
          Commit: ${{ github.sha }}
          Actor: ${{ github.actor }}
          
          Please check the GitHub Actions logs for details.

  # Cleanup on PR close
  cleanup-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r production/requirements-prod.txt
    
    - name: Cleanup PR resources
      env:
        STACK_NAME: IotPocStack-PR-${{ github.event.number }}
      run: |
        python3 -c "
        from production.deployment_manager import DeploymentManager, DeploymentConfig
        
        config = DeploymentConfig()
        config.stack_name = '${{ env.STACK_NAME }}'
        manager = DeploymentManager(config)
        
        try:
            result = manager.cleanup_stack()
            if result:
                print('PR resources cleaned up successfully')
            else:
                print('Failed to cleanup PR resources')
        except Exception as e:
            print(f'Cleanup failed: {e}')
        " 